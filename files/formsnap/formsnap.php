<?php
 require_once(dirname(__FILE__) . DIRECTORY_SEPARATOR .'lib/swift_required.php'); require_once(dirname(__FILE__) . DIRECTORY_SEPARATOR .'lib/browser.php'); require_once(dirname(__FILE__) . DIRECTORY_SEPARATOR .'lib/recaptchalib.php'); class Formsnap { private $recaptcha; private $browser; public $settings = array(); public $email_content = ''; public $receipt_content = ''; public $files = array(); public $errors = array(); function __construct() { $this->browser = new Browser; $this->settings['woosh'] = ($this->settings['smtp_host'] == 'woosh' && $this->settings['use_smtp'])?1:0; } public function recaptchaCheckAnswer() { $publickey = $this->settings['recaptcha_public_key']; $privatekey = $this->settings['recaptcha_private_key']; $resp = null; $error = null; $resp = recaptcha_check_answer($privatekey,$_SERVER["REMOTE_ADDR"],$_POST['recaptcha_challenge_field'],$_POST['recaptcha_response_field']); if (!$resp->is_valid) { return $resp->error; } return 'good'; } public function processForm() { if(!$this->settings['do_not_send']) { $this->buildEmailContent(); if($this->settings['woosh']) { $send = trim($this->sendWithWoosh()); }else{ $send = $this->sendMessage(); } if($send != 'good') @array_push($this->errors, $send); if($this->settings['send_receipt']) { $this->buildReceiptContent(); if($this->settings['woosh']) { $receipt = $this->sendWithWoosh(true); }else{ $receipt = $this->sendMessage(true); } if($receipt != 'good') @array_push($this->errors, $receipt); } } if($this->settings['save_to_mysql']){ $rs = $this->saveToMySQL(); if($rs != 'good') @array_push($this->errors, $rs); unset($rs); } } public function processAttachments() { if (isset($_FILES)) { foreach ($_FILES as $attachment) { $attachment_name = $attachment['name']; $attachment_size = $attachment["size"]; $attachment_temp = $attachment["tmp_name"]; $attachment_type = $attachment["type"]; $attachment_ext = explode('.', $attachment_name); $attachment_ext = $attachment_ext[count($attachment_ext)-1]; if ( $attachment['error'] === UPLOAD_ERR_OK && is_uploaded_file($attachment['tmp_name']) ) { if(@stristr($this->settings['allowed_file_types'], $attachment_ext) == FALSE){ return $this->settings['file_not_allowed']; } if($attachment_size > $this->settings['max_attachment_size_bytes']){ return $this->settings['file_too_big'] ; } $file = fopen($attachment_temp,'rb'); $data = fread($file,filesize($attachment_temp)); fclose($file); $data = chunk_split(base64_encode($data)); array_push($this->files, array('temp'=> $attachment_temp, 'name' => $attachment_name)); } else if ($attachment['error'] !== UPLOAD_ERR_NO_FILE) { switch ($attachment['error']) { case UPLOAD_ERR_INI_SIZE: case UPLOAD_ERR_FORM_SIZE: $error = "File $attachment_name exceeds the " . ini_get('upload_max_filesize') . 'B limit for the server.'; break; case UPLOAD_ERR_PARTIAL: $error = "Only part of the file $attachment_name could be uploaded, please try again."; break; default: $error = "There has been an error attaching the file $attachment_name, please try again."; } return $error; } } } return 'good'; } private function saveToMySQL() { $s = @mysql_connect($this->settings['mysql_host'], $this->settings['mysql_user'], $this->settings['mysql_password']); @mysql_query("SET NAMES 'utf8'"); @mysql_query("SET CHARACTER SET 'utf8'"); $d = @mysql_select_db($this->settings['mysql_db'], $s); if(!$s || !$d){ return "Cannot connect to database, ".$this->settings['mysql_db']; } mysql_set_charset('utf8'); $inserts = ''; foreach ($_POST['form'] as $key => $value) { $savetomysql_key = $key.'_savetomysql'; if(isset($_POST[$savetomysql_key]) && !empty($_POST['form'][$key]) ) { $v = $_POST['form'][$key]; $v = $this->value($v, false); $inserts .= $_POST[$savetomysql_key]." = '" . mysql_real_escape_string($v) . "',"; unset($v); } } if($this->settings['save_date']) $inserts .= $this->settings['save_date_field']." = NOW() ,"; if($this->settings['save_ip']) $inserts .= $this->settings['save_ip_field']." = '" . $_SERVER['REMOTE_ADDR'] . "' ,"; if($this->settings['save_browser']) { $agent = $this->browser->getBrowser().' v.'.$this->browser->getVersion(). ' ('.$this->browser->getPlatform().')'; $inserts .= $this->settings['save_browser_field']." = '" . $agent . "' ,"; } $inserts = substr($inserts, 0, -1); $sql = 'INSERT INTO `'. $this->settings['mysql_db']. '`.`'. $this->settings['mysql_table']. '` SET '. $inserts; $rs = @mysql_query($sql); unset($sql); if( mysql_errno() ){ $mysql_error= "MySQL Error: (".mysql_errno().") ".mysql_error()."<br />When executing:<br />".$mySQLQuery; return $mysql_error; } return 'good'; } private function sendWithWoosh($receipt=false) { $reply_to_email = $_POST['form'][$this->settings['reply_to_item']]; if(!$this->validateEmail($reply_to_email)) { $err="The value of the Reply-To item ( ".$reply_to_email." ) is not a valid email address."; @array_push($this->errors, $err); unset($err); } $from_email = $this->settings['from_email']; $from_name = $this->settings['from_name']; if(!$this->validateEmail($from_email)) { $err="The value of the From Email ( ".$from_email." ) is not a valid email address."; @array_push($this->errors, $err); return $err; } if($receipt) { $params = array('to'=>$reply_to_email, 'from_name'=>$from_name, 'from_email'=>$from_email, 'reply_to_email'=>$from_email, 'subject'=>strip_tags($this->settings['receipt_prefix'].$this->settings['subject']), 'body_html'=>$this->receipt_content, 'body_text'=>$this->_html2Text($this->receipt_content), 'source'=>$_REQUEST['url'] ); $rs = $this->_http_post($params); $rs = json_decode($rs); if($rs->result != "success") { $err = $rs->message; @array_push($this->errors, $err); return $err; } }else{ $params = array('to'=>$this->settings['to'], 'from_name'=>$from_name, 'from_email'=>$from_email, 'reply_to_email'=>$reply_to_email, 'cc'=>$this->settings['cc'], 'bcc'=>$this->settings['bcc'], 'subject'=>$this->settings['subject'], 'body_html'=>$this->email_content, 'body_text'=>$this->_html2Text($this->email_content), 'source'=>$_REQUEST['url'] ); $rs = $this->_http_post($params); $rs = json_decode($rs); if($rs->result != "success") { $err = $rs->message; @array_push($this->errors, $err); return $err; } } return 'good'; } private function sendMessage($receipt=false) { try { if($this->settings['use_smtp']) { if (!function_exists('proc_open')) { @array_push($this->errors, "proc_open() is not available on this server"); return 'proc_open() is not available on this server'; } $transport = Swift_SmtpTransport::newInstance($this->settings['smtp_host'], $this->settings['smtp_port']); if($this->settings['smtp_auth']) $transport->setUsername($this->settings['smtp_username'])->setPassword($this->settings['smtp_password']); if($this->settings['smtp_secure']) $transport->setEncryption($this->settings['smtp_secure_prefix']); $mailer = Swift_Mailer::newInstance($transport); unset($transport); }else{ $transport = Swift_MailTransport::newInstance(); $mailer = Swift_Mailer::newInstance($transport); unset($transport); } if($this->settings['smtp_debug']) { $logger = new Swift_Plugins_Loggers_ArrayLogger(); $mailer->registerPlugin(new Swift_Plugins_LoggerPlugin($logger)); } $message = Swift_Message::newInstance(strip_tags($this->settings['subject'])) ->setCharset($this->settings['encoding_charset']); $message->setContentType('text/html'); $reply_to_email = $_POST['form'][$this->settings['reply_to_item']]; if(!$this->validateEmail($reply_to_email)) { $err="The value of the Reply-To item ( ".$reply_to_email." ) is not a valid email address."; @array_push($this->errors, $err); unset($err); } $from_email = $this->settings['from_email']; $from_name = $this->settings['from_name']; if(!$this->validateEmail($from_email)) { $err="The value of the From Email ( ".$from_email." ) is not a valid email address."; @array_push($this->errors, $err); return $err; } if($receipt) { $to = array($reply_to_email); $message->setReplyTo( array($from_email=>$from_name) ); $message->setSender( array($from_email=>$from_name) ); $message->setFrom( array($from_email=>$from_name) ); $message->setReturnPath($from_email); $message->setSubject(strip_tags($this->settings['receipt_prefix'].$this->settings['subject'])); $message->setBody($this->receipt_content); $message->addPart($this->_html2Text($this->receipt_content), 'text/plain'); if($this->files){ if($this->settings['receipt_attachments']){ for ( $i = 0; $i < sizeof ( $this->files ); $i++ ) { $message->attach( Swift_Attachment::fromPath($this->files[$i]['temp'])->setFilename($this->files[$i]['name']) ); } } } if($this->settings['receipt_attach_file'] && file_exists($this->settings['receipt_file'])) { $message->attach( Swift_Attachment::fromPath($this->settings['receipt_file']) ); } }else{ $to = explode(',', $this->settings['to']); if($this->settings['cc']) { $cc = explode(',', $this->settings['cc']); $message->setCc($cc); } if($this->settings['bcc']) { $bcc = explode(',', $this->settings['bcc']); $message->setBcc($bcc); } $message->setReplyTo($reply_to_email); $message->setSender($reply_to_email); $message->setFrom( array($from_email=>$from_name) ); $message->setReturnPath($from_email); $message->setBody($this->email_content); $message->addPart($this->_html2Text($this->email_content), 'text/plain'); if($this->files){ for ( $i = 0; $i < sizeof ( $this->files ); $i++ ) { $message->attach( Swift_Attachment::fromPath($this->files[$i]['temp'])->setFilename($this->files[$i]['name']) ); } } } $failed = array(); $numSent = 0; foreach ($to as $address => $name) { if (is_int($address)) { $message->setTo($name); } else { $message->setTo(array($address => $name)); } $numSent += $mailer->send($message, $failed); } if(!$numSent || count($failed) ) { @array_push($this->errors, "$numSent message were sent. The following addresses had problems, ".implode(", ", $failed)); return $logger->dump(); exit; } } catch (Exception $e) { return $e->getMessage(); } unset($mailer); unset($message); return 'good'; } private function buildEmailContent() { $tpl = trim($this->settings['email_template']); if( empty($tpl) ) { $this->email_content = $this->buildDefaultHtmlContent(); }else{ $this->email_content = $this->parseTemplate('email'); } } private function buildReceiptContent() { $tpl = trim($this->settings['receipt_template']); if( empty($tpl) ) { $this->receipt_content = $this->buildDefaultHtmlContent('receipt'); }else{ $this->receipt_content = $this->parseTemplate('receipt'); } } private function buildDefaultHtmlContent($type='email') { $subject = ($type == 'receipt') ? $this->settings['receipt_prefix'].$this->settings['subject'] : $this->settings['subject']; $str = "<html>".PHP_EOL."<head>".PHP_EOL."<title>" . $this->_safeEscapeString($subject) . "</title>".PHP_EOL."</head>".PHP_EOL."<body>".PHP_EOL."<p>".PHP_EOL; $str .= "<table><tbody>".PHP_EOL; if($type == 'receipt') { $str .= '<p>We received your message containing the following values...</p>'; } $form = $_REQUEST['form']; foreach ($form as $key => $value) { $str .= '<tr><td align="right" valign="top" nowrap><b>' . strip_tags($key) . '</b></td><td> '; $str .= nl2br($this->value($value)) . "</td></tr>".PHP_EOL; } $str .= "</tbody></table>".PHP_EOL; $str .= "</p>".PHP_EOL."</body>".PHP_EOL."</html>"; return $str; } private function parseTemplate($type = 'email') { $str = ($type == 'email') ? $this->settings['email_template'] : $this->settings['receipt_template']; $form = $_REQUEST['form']; foreach ($form as $key => $value) { $str = str_replace("#{$key}#", nl2br($this->value($value)), $str); } $agent = $this->browser->getBrowser().' v.'.$this->browser->getVersion(). ' ('.$this->browser->getPlatform().')'; $str = str_replace("#browser#", $agent, $str); $str = str_replace("#ip_address#", $_SERVER['REMOTE_ADDR'], $str); $str = str_replace("#ip#", $_SERVER['REMOTE_ADDR'], $str); $str = str_replace("#date#", date('r'), $str); $str = str_replace("#page#", $_REQUEST['url'], $str); $str = preg_replace('/#([A-Za-z0-9-._]*)#/', '', $str); return $str; } public function getOutput($errors, $required) { $errors = array_merge($errors, $this->errors); $errors = array_unique($errors); if(count($errors)){ $missing = array(); $msg = '<p>'; $msg .= '<ul>'; foreach($errors as $error) $msg .= '<li>'.str_replace('"', '\'', $error).'</li>'; $msg .= '</ul>'; $msg .= '</p>'; if($this->settings['error_redirect']) { return json_encode( array('result'=>'fail', 'msg'=>'<h3>'.$this->settings['redirect_message'].'</h3>' ) ); } if(isset($required) && is_array($required)) { $missing = $required; } return json_encode( array('result'=>'fail', 'msg'=>$msg, 'required'=>$missing ) ); unset($msg); unset($missing); }else{ if($this->settings['success_redirect']) { return json_encode( array('result'=>'good', 'msg'=>'<h3>'.$this->settings['redirect_message'].'</h3>') ); }else{ return json_encode( array('result'=>'good', 'msg'=>'<h3>'.$this->settings['success_message'].'</h3>' ) ); } } return; } public function validateEmail($email) { if (preg_match("/[\\000-\\037]/",$email)) { return false; } $pattern = "/^[-_a-z0-9\'+*$^&%=~!?{}]++(?:\.[-_a-z0-9\'+*$^&%=~!?{}]+)*+@(?:(?![-.])[-a-z0-9.]+(?<![-.])\.[a-z]{2,16}|\d{1,3}(?:\.\d{1,3}){3})(?::\d++)?$/iD"; if(!preg_match($pattern, $email)){ return false; } return true; } public function checkRequiredFields() { $err = 0; $fields = array(); $rf = array(); foreach($_POST as $key => $value) { if(preg_match('/_required/', $key, $matches )) { array_push($rf, str_replace('_required', '', $key)); } } foreach($rf as $key) { if (isset($_FILES[$key])) { $string = (isset($_FILES[$key]['name'])) ? $_FILES[$key]['name'] : ''; } else { $string = $this->value($_POST['form'][$key]); } if( empty($string) ) { array_push($fields, $key); $err++; } unset($v); } if($err){ return $fields; }else{ return 'good'; } } public function value($var, $encode=true){ $sep=", "; if($encode) $var = $this->_htmlEntities($var); if(is_array($var)){ $str = (isset($var)) ? implode($sep, $var) : ''; }else{ $str = (isset($var)) ? $var : ''; } return $str; } private function _stringCleaner($str) { $str = preg_replace( '((?:\n|\r|\t|%0A|%0D|%08|%09)+)i' , '', $str ); if(get_magic_quotes_gpc()){ $str = stripslashes($str); } return $str; } private function _safeEscapeString($string) { $str = strip_tags($string); $str = $this->_htmlEntities($str); return $str; } private function _htmlEntities($mixed, $quote_style = ENT_QUOTES, $charset = 'UTF-8') { if (is_array($mixed)) { foreach($mixed as $key => $value) { $mixed[$key] = $this->_htmlEntities($value, $quote_style, $charset); } } elseif (is_string($mixed)) { $mixed = htmlentities(html_entity_decode($mixed, $quote_style), $quote_style, $charset); } return $mixed; } private function _html2Text($str) { $text_str = str_replace("<br />", PHP_EOL, $str); $text_str = strip_tags($text_str); $text_str = htmlspecialchars_decode($text_str); return $text_str; } private function _http_post($params) { $url = 'http://woosh.email/process'; $postData = ''; foreach ($_FILES as $param => $file) { $params[$param] = '@' . $file['tmp_name'] . ';filename=' . $file['name'] . ';type=' . $file['type']; } if($this->settings['receipt_attach_file'] && file_exists($this->settings['receipt_file'])) { } $ch = curl_init(); $header = array("Content-type: multipart/form-data"); curl_setopt($ch,CURLOPT_URL,$url); curl_setopt($ch,CURLOPT_USERAGENT, "Mozilla/4.0 (compatible; MSIE 5.01; Windows NT 5.0)"); curl_setopt($ch,CURLOPT_RETURNTRANSFER,TRUE); curl_setopt($ch,CURLOPT_HTTPHEADER,$header); curl_setopt($ch,CURLOPT_ENCODING,""); curl_setopt($ch,CURLOPT_FOLLOWLOCATION, TRUE); curl_setopt($ch, CURLOPT_POST, TRUE); curl_setopt($ch, CURLOPT_POSTFIELDS, $params); $output=curl_exec($ch); if($output === false) { echo "Error Number:".curl_errno($ch)."<br>"; echo "Error String:".curl_error($ch); } curl_close($ch); return $output; } } 
